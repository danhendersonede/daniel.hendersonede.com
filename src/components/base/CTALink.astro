---
import type { HTMLAttributes } from 'astro/types';
import { Image } from 'astro:assets';
import arrowCircleRight from '@phosphor-icons/core/assets/regular/arrow-circle-right.svg';
import arrowCircleLeft from '@phosphor-icons/core/assets/regular/arrow-circle-left.svg';
import arrowCircleDown from '@phosphor-icons/core/assets/regular/arrow-circle-down.svg';

interface Props extends HTMLAttributes<'a'> {
  fullWidth?: boolean;
  arrowDirection?: 'left' | 'down' | 'right';
  arrowPosition?: 'before' | 'after';
  variant?: 'default' | 'inverted';
}

const {
  href,
  fullWidth,
  arrowDirection = 'right',
  arrowPosition = 'after',
  variant = 'default',
  class: className,
  ...rest
} = Astro.props;
---

<a
  href={href}
  {...rest}
  class={`link-cta ${variant !== 'default' ? `variant-${variant}` : ''} ${className} ${fullWidth ? 'full-width' : ''}`}
>
  {
    arrowPosition === 'before' &&
      (arrowDirection === 'right' ? (
        <Image src={arrowCircleRight} alt="" loading="eager" class="icon" />
      ) : arrowDirection === 'down' ? (
        <Image src={arrowCircleDown} alt="" loading="eager" class="icon" />
      ) : (
        <Image src={arrowCircleLeft} alt="" loading="eager" class="icon" />
      ))
  }
  <slot />
  {
    arrowPosition === 'after' &&
      (arrowDirection === 'right' ? (
        <Image src={arrowCircleRight} alt="" loading="eager" class="icon" />
      ) : arrowDirection === 'down' ? (
        <Image src={arrowCircleDown} alt="" loading="eager" class="icon" />
      ) : (
        <Image src={arrowCircleLeft} alt="" loading="eager" class="icon" />
      ))
  }
</a>

<style>
  .link-cta {
    --color-text-link-hover: var(--color-text-inverse);
  }

  .link-cta.variant-inverted {
    --color-text: var(--color-text-inverse);
    --color-text-link-hover: var(--color-gray-0);
    --border-style: solid 2px var(--color-text-inverse);
  }

  .link-cta {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-s);
    padding: var(--spacing-xs) var(--spacing-s);
    border: var(--border-style);
    border-radius: var(--border-radius-interactive);
    text-decoration: none;
    color: var(--color-text);
    min-height: 44px;
    width: fit-content;
  }

  .link-cta:hover,
  .link-cta:focus-visible {
    background-color: var(--color-text);
    outline-offset: 2px;
    color: var(--color-text-link-hover);
  }

  @media (max-width: 768px) {
    .link-cta.full-width {
      width: 100%;
      justify-content: space-between;
    }
  }
</style>
